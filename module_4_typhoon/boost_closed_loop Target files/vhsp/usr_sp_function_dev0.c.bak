// generated using template: cop_main.template---------------------------------------------
/******************************************************************************************
**
**  Module Name: cop_main.c
**  NOTE: Automatically generated file. DO NOT MODIFY!
**  Description:
**            Main file
**
******************************************************************************************/
// generated using template: arm/custom_include.template-----------------------------------

// x86 libraries:
#include "../include/sp_functions_dev0.h"

// H files from Advanced C Function components
//#include "example_dll.h"

// Header files from additional sources (Advanced C Function)
// ----------------------------------------------------------------------------------------                
// generated using template: VirtualHIL/custom_defines.template----------------------------

typedef unsigned char X_UnInt8;
typedef char X_Int8;
typedef signed short X_Int16;
typedef unsigned short X_UnInt16;
typedef int X_Int32;
typedef unsigned int X_UnInt32;
typedef unsigned int uint;
typedef double real;

// ----------------------------------------------------------------------------------------                
// generated using template: custom_consts.template----------------------------------------

// arithmetic constants
#define C_SQRT_2                    1.4142135623730950488016887242097f
#define C_SQRT_3                    1.7320508075688772935274463415059f
#define C_PI                        3.1415926535897932384626433832795f
#define C_E                         2.7182818284590452353602874713527f
#define C_2PI                       6.283185307179586476925286766559f

//@cmp.def.start
//component defines
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
//@cmp.def.end


//-----------------------------------------------------------------------------------------                 
// generated using template: common_variables.template-------------------------------------
// true global variables


//@cmp.var.start
// variables
    double _vout_va1__out;
    double _reference__out;
    double _pwm_enable__out;
             double _control_range_shifter_const__out = 0.5;
          double _control_sum1__out;
      float _enable__tmp;
          double _control_not__out;
  double _control_p__out;double _control_i__out;            double _control_integrator__out;
          double _control_sum2__out;
        double _control_limit__out;
  double _control_range_shifter_gain1__out;      double _control_range_shifter_sum3__out;
        X_UnInt32 _boost_pwm_modulator__channels[1] = {0};
    double _boost_pwm_modulator__limited_in[1];
    X_UnInt32 _boost_pwm_modulator__update_mask;
    X_UnInt32 _boost_pwm_modulator__sig_dir[1];

            //@cmp.var.end

//@cmp.svar.start
// state variables
        double _control_integrator__state;double _control_integrator__reset_state;//@cmp.svar.end              
// generated using template: virtual_hil/custom_functions.template---------------------------------
void ReInit_user_sp_cpu_dev0(){

#if DEBUG_MODE
    printf("\n\rReInitTimer");
#endif
    //@cmp.init.block.start
    
    
    
    
    
        
    
    
    
                                _control_integrator__state = 0.0;
                                _control_integrator__reset_state = 2;
            
    
    
    
    
              HIL_OutAO(0x2000, 0.0f);
        
                                _boost_pwm_modulator__update_mask = 1;
                                HIL_OutInt32(0x2000080 + _boost_pwm_modulator__channels[0], 2500);// divide by 2 is already implemented in hw
                HIL_OutInt32(0x20000c0 + _boost_pwm_modulator__channels[0], 50);
                            HIL_OutInt32(0x20001c0 + _boost_pwm_modulator__channels[0], 0);
                HIL_OutInt32(0x2000200 + _boost_pwm_modulator__channels[0], 0);
                        HIL_OutInt32(0x2000240 + _boost_pwm_modulator__channels[0], 0);
            HIL_OutInt32(0x2000140, _boost_pwm_modulator__update_mask);


    //@cmp.init.block.end
}

void ReInit_sp_scope_user_sp_cpu_dev0(){
    // initialise SP Scope buffer pointer
    }              
// generated using template: common_timer_counter_handler.template-------------------------

/*****************************************************************************************/
/**
* This function is the handler which performs processing for the timer counter.
* It is called from an interrupt context such that the amount of processing
* performed should be minimized.  It is called when the timer counter expires
* if interrupts are enabled.
*
*
* @param    None
*
* @return   None
*
* @note     None
*
*****************************************************************************************/

void TimerCounterHandler_0_user_sp_cpu_dev0() {

#if DEBUG_MODE
    printf("\n\rTimerCounterHandler_0");
#endif

    //////////////////////////////////////////////////////////////////////////
    // Output block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.out.block.start
         // Generated from the component: Vout.Va1
        _vout_va1__out = HIL_InAO(0x3);

             // Generated from the component: Reference
                _reference__out = XIo_InFloat(0x55000104);
    
             // Generated from the component: PWM Enable
                _pwm_enable__out = XIo_InFloat(0x55000100);
    
             // Generated from the component: Control.range shifter.const
        
             // Generated from the component: Control.Sum1
                                              _control_sum1__out = _reference__out-_vout_va1__out;    
  
             // Generated from the component: enable
                                HIL_OutInt32(0xf00400, _pwm_enable__out != 0x0);
        
             // Generated from the component: Control.not
                                        _control_not__out = !_pwm_enable__out;  

             // Generated from the component: Control.P
                                _control_p__out = 0.006 * _control_sum1__out;
        
             // Generated from the component: Control.I
                                _control_i__out = 1.0 * _control_sum1__out;
        
             // Generated from the component: Control.Integrator
    if ((_control_not__out != 0.0) || (_control_integrator__reset_state != 0)) {_control_integrator__state = 0.0;
                }        _control_integrator__out = _control_integrator__state;
    
             // Generated from the component: Control.Sum2
                                              _control_sum2__out = _control_p__out+_control_integrator__out;    
  
             // Generated from the component: Control.Limit
            if (_control_sum2__out > 1.0) {
          _control_limit__out = 1.0;
      } else if (_control_sum2__out < -1.0) {
          _control_limit__out = -1.0;
      } else {
          _control_limit__out = _control_sum2__out;
      }
      
             // Generated from the component: Control.range shifter.Gain1
                                _control_range_shifter_gain1__out = 0.5 * _control_limit__out;
        
             // Generated from the component: Control.range shifter.Sum3
                                              _control_range_shifter_sum3__out = _control_range_shifter_gain1__out+_control_range_shifter_const__out;    
  
             // Generated from the component: Modulation Signal
          HIL_OutAO(0x2000, (float)_control_range_shifter_sum3__out);
  
             // Generated from the component: BOOST.PWM_Modulator
                                if (_control_range_shifter_sum3__out < 0.0)
                  _boost_pwm_modulator__limited_in[0] = 0.0;
                else if (_control_range_shifter_sum3__out > 1.0)
                  _boost_pwm_modulator__limited_in[0] = 1.0;
                else
                  _boost_pwm_modulator__limited_in[0] = _control_range_shifter_sum3__out;
                HIL_OutInt32(0x2000040 + _boost_pwm_modulator__channels[0], ((unsigned)((_boost_pwm_modulator__limited_in[0]-(0.0))*2500.0)));
                                            if (_pwm_enable__out == 0x0) {
        // pwm_modulator_en
                    HIL_OutInt32(0x2000000 + _boost_pwm_modulator__channels[0], 0x0);
            }
    else {
        // pwm_modulator_en
                    HIL_OutInt32(0x2000000 + _boost_pwm_modulator__channels[0], 0x1);
            }
    HIL_OutInt32(0x2000140, _boost_pwm_modulator__update_mask);

    //@cmp.out.block.end


    //////////////////////////////////////////////////////////////////////////
    // Update block
    //////////////////////////////////////////////////////////////////////////
    //@cmp.update.block.start
                                             // Generated from the component: Control.Integrator
                            _control_integrator__state = (_control_not__out == 0) ? _control_integrator__state + _control_i__out * 5e-05 :0.0;             
    
                                        if (_control_not__out > 0)
                _control_integrator__reset_state = 1;
            else if (_control_not__out < 0)
                _control_integrator__reset_state = -1;
            else
                _control_integrator__reset_state = 0;

            
                                //@cmp.update.block.end
}
// ----------------------------------------------------------------------------------------  //-----------------------------------------------------------------------------------------